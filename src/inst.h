#ifndef __INST_H__
#define __INST_H__

#include <common.h>

// inst
// --------------------------------------
// |                R-type              |
// --------------------------------------
// |  op  | rd  | rs1 | rs2 |    imm    |
// --------------------------------------
// |******|*****|*****|*****|***********|
// --------------------------------------
// |                I-type              |
// --------------------------------------
// |  op  | rd  | rs1 |       imm       |
// --------------------------------------
// |******|*****|*****|**************** |
// --------------------------------------
// |                S-type              |
// --------------------------------------
// |  op  |                             |
// --------------------------------------
// |******|00000000000000000000000000   |
// --------------------------------------

#define INST    inst_fetch.inst
#define OP      BITS(INST, 5, 0)
#define RD      BITS(INST, 10, 6) 
#define RS1     BITS(INST, 15, 11)
#define RS2     BITS(INST, 20, 16)
#define IMMR    SEXT(BITS(INST, 31, 21), 11)
#define IMMI    SEXT(BITS(INST, 31, 16), 16)


// ### op

// --------------------------------------------------------
// |name   |type |opcode  |operation                      |
// --------------------------------------------------------
// |ADD    |R    |000000  |rd = rs1 + rs2                 |
// --------------------------------------------------------
// |SUB    |R    |000001  |rd = rs1 - rs2                 |
// --------------------------------------------------------
// |ADDI   |I    |010000  |rd = rs1 + imm                 |
// --------------------------------------------------------
// |SUBI   |I    |010001  |rd = rs1 - imm                 |
// --------------------------------------------------------
// |BEQ    |R    |001000  |if (rs1 == rs2) pc = pc + imm  |
// --------------------------------------------------------
// |BNEQ   |R    |001001  |if (rs1 != rs2) pc = pc + imm  |
// --------------------------------------------------------
// |BLT    |R    |001010  |if (rs1 < rs2) pc = pc + imm   |
// --------------------------------------------------------
// |BGE    |R    |001011  |if (rs1 >= rs2) pc = pc + imm  |
// --------------------------------------------------------
// |STORE  |I    |011000  |mem(rs1 + imm) = rd            |
// --------------------------------------------------------
// |LOAD   |I    |011001  |rd = mem(rs1 + imm)            |
// --------------------------------------------------------
// |JMP    |I    |011100  |pc = pc + imm; rd = pc + 4;    |
// --------------------------------------------------------
// |JMPR   |I    |011101  |pc = rs1 +imm; rd = pc + 4;    |
// --------------------------------------------------------
// |SCALL  |S    |011110  |                               |
// --------------------------------------------------------
// |AUIPC  |I    |111110  |rd = pc + imm << 16            |
// --------------------------------------------------------

#define ADD     0b000000
#define SUB     0b000001
#define ADDI    0b010000
#define SUBI    0b010001
#define AUIPC   0b111110
#define BEQ     0b001000
#define BNEQ    0b001001
#define BLT     0b001010
#define BGE     0b001011
#define STORE   0b011000
#define LOAD    0b011001
#define JMP     0b011100
#define JMPR    0b011101
#define SCALL   0b011110
#define AUIPC   0b111110

// typedef struct inst_r_t {
//     uint8_t op      :6;
//     uint8_t rd      :5;
//     uint8_t rs1     :5;
//     uint8_t rs2     :5;
//     uint16_t imm    :11;
// } inst_r_t;
// 
// typedef struct inst_i_t {
//     uint8_t op      :6;
//     uint8_t rd      :5;
//     uint8_t rs1     :5;
//     uint16_t imm    :16;
// } inst_r_t;

// typedef struct inst_t {
//     uint8_t op             :6;
//     uint8_t rd             :5;
//     uint8_t rs1            :5;
//     union {
//         struct {            // R-type
//             uint8_t rs2     :5;
//             uint16_t immr   :11;
//         };                  // I-type
//         uint16_t immi       :16;
//     };
// } inst_t;

typedef struct inst_fetch_t{
    uint32_t inst;
    uint32_t pc;
    uint32_t snpc;
    uint32_t dnpc;
} inst_fetch_t;

extern inst_fetch_t inst_fetch;

void inst_exec();

#endif // __INST_H__
